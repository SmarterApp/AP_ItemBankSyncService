/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.itembank.sync;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreEventHandler;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.itembank.ItemEventReceiver;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@Configuration
@ConditionalOnProperty(value = "itembank.enabled.sync", havingValue = "true")
public class ItemBankSyncConfiguration {

    private final ItemBankProperties itemBankProperties;

    public ItemBankSyncConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    public AmazonClient amazonClient() {
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository) {
        return new DataStoreDataManager(this.itemBankProperties, itemEntityRepository, workflowStatusRepository);
    }

    @Bean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(itemRepository);
    }

    @Bean
    public DataStoreEventHandler dataStoreEventHandler(GitLabItemManager gitLabItemManager,
                                                       DataStoreDataManager dataStoreDataManager,
                                                       DataStoreAttachmentManager dataStoreAttachmentManager,
                                                       DataStoreUtility dataStoreUtility) {
        return new DataStoreEventHandler(
            this.itemBankProperties,
            gitLabItemManager,
            dataStoreDataManager,
            dataStoreAttachmentManager,
            dataStoreUtility
        );
    }

    @Bean
    public ItemEventReceiver dataStoreItemEventReceiver(DataStoreEventHandler eventHandler) {
        return new ItemEventReceiver(eventHandler);
    }

    @Bean
    public ItemCleanupTask ItemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }
}
