/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.itembank.sync;

import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.BrokerConfig;
import org.opentestsystem.ap.common.config.ContentNegotiationConfig;
import org.opentestsystem.ap.common.config.DatabaseConfiguration;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.ItemManagerConsumerConfiguration;
import org.opentestsystem.ap.common.config.RedisSessionConfig;
import org.opentestsystem.ap.common.config.SecurityConfig;
import org.opentestsystem.ap.common.config.SessionConfig;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.itembank.EquationEditorRepository;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.management.ItemManagerEventConsumer;
import org.opentestsystem.ap.common.management.ItemManagerEventHandler;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.RepositoryDependencyProvider;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.RandomIdGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@Configuration
@Import({
    StatusConfiguration.class,
    ContentNegotiationConfig.class,
    DatabaseConfiguration.class,
    BrokerConfig.class,
    FreemarkerConfig.class,
    ItemManagerConsumerConfiguration.class,
    RedisSessionConfig.class,
    SecurityConfig.class,
    SessionConfig.class
})
@EnableConfigurationProperties({ItemBankProperties.class, TaskProperties.class})
public class ItemBankSyncConfiguration {

    private final ItemBankProperties itemBankProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final freemarker.template.Configuration freemarker;

    private final IdGenerator itemIdGenerator;

    private final DataStoreDataManager dataStoreDataManager;

    private final DataStoreAttachmentManager dataStoreAttachmentManager;

    private final DataStoreUtility dataStoreUtility;

    public ItemBankSyncConfiguration(ItemBankProperties itemBankProperties,
                                     RestTemplateBuilder restTemplateBuilder,
                                     freemarker.template.Configuration freemarker,
                                     IdGenerator itemIdGenerator,
                                     DataStoreDataManager dataStoreDataManager,
                                     DataStoreAttachmentManager dataStoreAttachmentManager,
                                     DataStoreUtility dataStoreUtility) {
        this.itemBankProperties = itemBankProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.freemarker = freemarker;
        this.itemIdGenerator = itemIdGenerator;
        this.dataStoreDataManager = dataStoreDataManager;
        this.dataStoreAttachmentManager = dataStoreAttachmentManager;
        this.dataStoreUtility = dataStoreUtility;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator() {
        return new WirisImageGenerator(itemBankProperties, restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemFactory itemFactory() {
        return new ItemFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public JsonModelAssembler jsonModelAssembler() {
        return new JsonModelAssembler();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public StringAssembler stringAssembler() {
        return new StringAssembler(this.freemarker);
    }


    @Bean
    @ConditionalOnMissingBean
    public SaaifAssembler saaifAssembler() {
        return new SaaifAssembler(saaifMetadataAssembler(), saaifWordListAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifMetadataAssembler saaifMetadataAssembler() {
        return new SaaifMetadataAssembler();
    }


    @Bean
    @ConditionalOnMissingBean
    public SaaifWordListAssembler saaifWordListAssembler() {
        return new SaaifWordListAssembler();
    }


    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public EquationEditorRepository equationEditorRepository() {
        return new EquationEditorRepository();
    }

    @Bean
    @ConditionalOnMissingBean
    public GitlabClient gitlabClient() {
        return new GitlabClient(this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitClientFactory gitClientFactory() {
        return new GitClientFactory(
            this.itemBankProperties,
            appAssembler(),
            imageGenerator(),
            transformerFactory());
    }

    @Bean
    @ConditionalOnMissingBean
    public RepositoryDependencyProvider repositoryDependencyProvider() {
        return new RepositoryDependencyProvider(
            gitClientFactory(),
            gitlabClient(),
            this.itemIdGenerator,
            this.itemBankProperties,
            this.freemarker,
            attachmentValidator(),
            appAssembler(),
            equationEditorRepository(),
            imageGenerator(),
            transformerFactory()
            );
    }

    @Bean
    @ConditionalOnMissingBean
    public AttachmentValidator attachmentValidator() {
        return new AttachmentValidator(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemRepository itemRepository() {
        return new ItemRepository(repositoryDependencyProvider());
    }


    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabItemManager() {
        return new GitLabItemManager(this.itemBankProperties, itemRepository());
    }

    // ------------------------------------------------------------------------
//
//    @Bean
//    @ConditionalOnMissingBean
//    public S3BucketManager s3BucketManager() {
//        return new S3BucketManager(itemBankProperties);
//    }
//
//    @Bean
//    @ConditionalOnMissingBean
//    public S3VersionedBucketManager s3VersionedBucketManager() {
//        return new S3VersionedBucketManager(itemBankProperties);
//    }
//
//    @Bean
//    @ConditionalOnMissingBean
//    public DataStoreUtility dataStoreUtility() {
//        return new DataStoreUtility();
//    }
//
//    @Bean
//    @ConditionalOnMissingBean
//    public DataStoreAttachmentManager dataStoreAttachmentManager() {
//        return new DataStoreAttachmentManager(
//            this.itemBankProperties,
//            s3BucketManager(),
//            s3VersionedBucketManager(),
//            dataStoreUtility());
//    }
//
//    @Bean
//    @ConditionalOnMissingBean
//    public DataStoreDataManager dataStoreDataManager() {
//        return new DataStoreDataManager(
//            this.itemBankProperties,
//            this.itemEntityRepository,
//            this.workflowStatusRepository,
//            this.workflowStatusTransitionRepository,
//            this.itemSyncRepository,
//            this.itemHistoryRepository);
//    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventHandler itemManagerEventHandler() {
        return new ItemManagerEventHandler(
            this.itemBankProperties,
            gitLabItemManager(),
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager,
            this.dataStoreUtility
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventConsumer itemManagerEventConsumer() {
        return new ItemManagerEventConsumer(itemManagerEventHandler());
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public AppAssembler appAssembler() {
        return new AppAssembler(saaifAssembler(), jsonModelAssembler(), stringAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier() {
        return new AssociatedStimulusSupplier(this.dataStoreDataManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public TransformerFactory transformerFactory() {
        return new TransformerFactory(associatedStimulusSupplier());
    }
}
