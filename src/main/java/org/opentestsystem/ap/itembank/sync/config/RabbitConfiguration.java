package org.opentestsystem.ap.itembank.sync.config;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.itembank.ItemBankObjectMapper;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;
import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;
import org.springframework.amqp.rabbit.transaction.RabbitTransactionManager;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.interceptor.RetryOperationsInterceptor;
import org.springframework.util.backoff.ExponentialBackOff;

import javax.annotation.PostConstruct;

@Configuration
@ConditionalOnClass(EnableRabbit.class)
public class RabbitConfiguration {

    @Autowired
    protected RabbitTemplate rabbitTemplate;

    @Autowired
    protected ItemBankProperties itemBankProperties;

    @PostConstruct
    protected void init() {
        // set rabbit template to support transactions
        rabbitTemplate.setChannelTransacted(true);

        final Jackson2JsonMessageConverter messageConverter = new Jackson2JsonMessageConverter();
        messageConverter.setJsonObjectMapper(new ItemBankObjectMapper());

        rabbitTemplate.setMessageConverter(messageConverter);
    }

    @Bean
    @ConditionalOnMissingClass("org.springframework.orm.jpa.JpaTransactionManager")
    public RabbitTransactionManager rabbitTransactionManager(ConnectionFactory connectionFactory) {
        return new RabbitTransactionManager(connectionFactory);
    }

    @Bean
    @ConditionalOnProperty(value = "itembank.test.enabled", havingValue = "false", matchIfMissing = true)
    public RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory) {
        return new RabbitAdmin(connectionFactory);
    }

    @Bean
    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory,
                                                                               RetryOperationsInterceptor retryOperationsInterceptor) {
        final ItemBankProperties.ItemEventsProperties.ItemEventsReceiverProperties receiver = itemBankProperties
            .getEvents().getReceiver();

        Jackson2JsonMessageConverter messageConverter = new Jackson2JsonMessageConverter();
        messageConverter.setJsonObjectMapper(new ItemBankObjectMapper());

        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        factory.setMessageConverter(messageConverter);
        factory.setAdviceChain(retryOperationsInterceptor);

        return factory;
    }

    @Bean
    RetryOperationsInterceptor retryOperationsInterceptor(ItemBankProperties properties) {
        ItemBankProperties.ItemEventsProperties eventProps = properties.getEvents();
        final ItemBankProperties.ItemEventsProperties.ItemEventsReceiverProperties receiver = eventProps.getReceiver();
        return RetryInterceptorBuilder.stateless()
            .backOffOptions(receiver.getInitialInterval(), receiver.getMultiplier(), receiver.getMaxInterval())
            .maxAttempts(receiver.getMaxAttempts())
            .recoverer(
                new RepublishMessageRecoverer(rabbitTemplate, eventProps.getExchange(), eventProps.getErrorEventKey())
            )
            .build();
    }

}
